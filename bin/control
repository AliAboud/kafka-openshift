#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

cartridge_type="kafka"
version=2.8.0
export STOPTIMEOUT=10

function is_running {
  pidfile=$OPENSHIFT_KAFKA_DIR/kafka/pid/kafka.pid

  if [ -f $pidfile ]; then
cass_pid=`cat $pidfile 2> /dev/null`

    if `ps --pid $cass_pid > /dev/null 2>&1`
    then
return 0
    fi
fi

return 1
}
# TODO: account for standalone scenario
# TODO: source user hooks?
# Start and block until it comes up.
function start {

  if marker_present "enable_jpda"
     then
     export ENABLE_JPDA=1
  fi

  if ! is_running; then
    pushd ${OPENSHIFT_KAFKA_DIR}/versions/${version}
    #bin/zookeeper-server-start.sh config/zookeeper.properties
    #bin/kafka-server-start.sh config/server.properties -p $OPENSHIFT_CASSANDRA_DIR/kafka/pid/kafka.pid
  else
echo "Kafka already running" 1>&2
  fi
}

function wait_for_cassandrad_availability {
  pidfile=$OPENSHIFT_KAFKA_DIR/pid/kafka.pid

  if [ -n "$OPENSHIFT_KAFKA_USERNAME" ]; then
i=0
    sleep 1
    while (( ! touch_cassandrad ) || [ ! -f $pidfile ]) && [ $i -lt 30 ]
    do
sleep 1
      i=$(($i + 1))
    done
fi
}

function stop {
  if is_running; then
pidfile=$OPENSHIFT_KAFKA_DIR/kafka/pid/kafka.pid

    if [ -f $pidfile ]; then
pid=$( /bin/cat $pidfile )
      /bin/kill $pid
      ret=$?
      if [ $ret -eq 0 ]; then
TIMEOUT="$STOPTIMEOUT"
        while [ $TIMEOUT -gt 0 ] && [ -f "$pidfile" ]
        do
          /bin/kill -0 "$pid" >/dev/null 2>&1 || break
sleep 1
          let TIMEOUT=${TIMEOUT}-1
        done
fi
else
echo "Kafka already stopped" 1>&2
    fi
fi
}

function status {
  if is_running; then
client_result "Kafka is running"
  else
client_result "Kafka is stopped"
  fi

exit 0
}

case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  status)
    status
  ;;
  restart)
    stop
    start
  ;;
esac


